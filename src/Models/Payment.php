<?php declare(strict_types=1);

namespace HDSSolutions\Bancard\Models;

use HDSSolutions\Bancard\Builders\TokenBuilder;
use Illuminate\Database\Eloquent\Casts\Attribute;
use RuntimeException;

/**
 * @property-read int $id Resource Identifier
 * @property string $type Payment type, see {@see PaymentType}
 * @property string $description Description of the Payment
 * @property float $amount Amount of the Payment
 * @property string $currency Currency of Payment, see {@see Currency}
 * @property ?int $card_id Card Identifier of the Payment
 * @property-read string $token Token for the Payment
 * @property-read string $status Current status of the Payment, see {@see PaymentStatus}
 * @property-read ?string $process_id Process Identifier generated by Bancard
 * @property-read ?string $process_result Result of the payment process
 * @property-read ?string $rollback_result Result of the rollback process
 */
final class Payment extends Base\Model {

    /**
     * @param  float  $amount  Amount of the Payment
     * @param  string  $description  Description for the Payment
     * @param  string|null  $currency  Currency for the Payment
     *
     * @return self Payment of type single_buy
     */
    public static function newSingleBuy(float $amount, string $description, ?string $currency = null): self {
        return self::newPayment(PaymentType::SingleBuy, $amount, $description, $currency);
    }

    /**
     * @return Attribute Attribute assessor for building the token
     */
    public function token(): Attribute {
        return Attribute::get(fn($token) => TokenBuilder::for($this));
    }

    /**
     * @param  string  $payment_type  Type of Payment to make
     * @param  float  $amount  Amount of the Payment
     * @param  string  $description  Description of the Payment
     * @param  string|null  $currency  Currency for the Payment
     * @param  Card|null  $card  Card to use for the Payment
     *
     * @return self Payment of specified type
     */
    private static function newPayment(string $payment_type, float $amount, string $description, ?string $currency = null, ?Card $card = null): self {
        // validate currency through local model
        if ( !Currency::isValid($currency)) {
            // reject with an exception
            throw new RuntimeException(sprintf("Invalid currency (%s)", $currency));
        }
        // validate payment type through local model
        if ( !PaymentType::isValid($payment_type)) {
            // reject with an exception
            throw new RuntimeException(sprintf("Invalid payment type (%s)", $payment_type));
        }

        // create a new Payment resource
        return self::create([
            'type'        => $payment_type,
            'amount'      => $amount,
            'description' => $description,
            'currency'    => $currency ?? Currency::Guarani,
            'card_id'     => $card?->id ?? null,
        ]);
    }

}
